#!/usr/bin/env python
# Copyright year Luis Ivey livey@bu.edu
# Copyright year Shuyan Zhang shuyanzh@bu.edu

'''

'''
from os import listdir
from os import getcwd
from os import get_terminal_size
from os.path import isdir
from os.path import isfile
from math import floor, ceil
from re import sub
import sys

def get_current_directory_files(directory_to_get_files_from):
    current_directory = listdir(directory_to_get_files_from)
    current_directory.sort(key=lambda x: (sub("[!-/:-@[-`{-~]+", '', x).lower(), sub("[!-/:-@[-`]+", '', x).lower(), sub("[!-/:-@]+", '', x).lower(), sub("[!-/]+", '', x).lower(), sub("[a-z0-9!-/:-@[-`{-~]+", ' ', x).lower()  ))
    list_of_capitals_with_length_1 = []

    for f in range(len(current_directory)):
        if len(current_directory[f]) == 1 and current_directory[f].isupper():
            list_of_capitals_with_length_1.append(f)


    if len(list_of_capitals_with_length_1) > 0:
        for f in range(len(list_of_capitals_with_length_1)):
            for i in range(list_of_capitals_with_length_1[f] + 1, len(current_directory)):
                if len(current_directory[i]) == 2 and (current_directory[list_of_capitals_with_length_1[f]].lower() == current_directory[i][0]) and (current_directory[i][1] > current_directory[list_of_capitals_with_length_1[f]]):
                    temp = current_directory[list_of_capitals_with_length_1[f]]
                    current_directory[list_of_capitals_with_length_1[f]] = current_directory[i]
                    current_directory[i] = temp
    return current_directory

def bool_matrix_works(data, rows, columns, column_requirements):
    test_matrix = [['' for y in range(columns) ] for x in range(rows)]
    counter_for_data_index = 0
    
    for y in range(columns):
        for x in range(rows):  
            if counter_for_data_index >= len(data):
                continue
            test_matrix[x][y] = data[counter_for_data_index]
            counter_for_data_index = counter_for_data_index + 1
    

    row_length_matrix = ['' for x in range(rows)]
    
    for x in range(rows):
        for y in range(columns):
            row_length_matrix[x] = row_length_matrix[x] + test_matrix[x][y]
            longest_length_filename_in_col = 0
            for l in range(rows):
                if longest_length_filename_in_col < len(test_matrix[l][y]):
                    longest_length_filename_in_col = len(test_matrix[l][y])
            amount_of_spaces = longest_length_filename_in_col - len(test_matrix[x][y])
            for k in range(3 + amount_of_spaces):
                row_length_matrix[x] = row_length_matrix[x] + ' '
            if (len(row_length_matrix[x]) > column_requirements):
                return False,0
    return True,row_length_matrix    

def find_matrix(data):
    col, lines = get_terminal_size()
    for x in range(1,len(data) + 1):
        amount_of_files_per_col = ceil(len(data)/x)
        torf, matrix = bool_matrix_works(data, x, amount_of_files_per_col, col)
        if (torf):
            return x,amount_of_files_per_col,matrix

def handle_nonexisting_files(list_of_command_line_arguments, list_of_files_in_current_directory):
    for arg in list_of_command_line_arguments:
        if (not arg in list_of_files_in_current_directory):
            print("ls: cannot access'{}': No such file or directory".format(arg))
            list_of_command_line_arguments.remove(arg)
    return list_of_command_line_arguments



def handle_if_argument_is_file(list_of_command_line_arguments):
    list_of_current_directory_files = list_of_command_line_arguments.copy()
    for arg in list_of_command_line_arguments:
        if (not isfile(arg)):
            list_of_current_directory_files.remove(arg)
    return list_of_current_directory_files



def handle_if_argument_is_directory(list_of_command_line_arguments):
    list_of_current_directory_directories = list_of_command_line_arguments.copy()
    for arg in list_of_command_line_arguments:
        if (not isdir(arg)):
            list_of_current_directory_directories.remove(arg)
    return list_of_current_directory_directories



def print_mode_1_ls_w_files_and_directories(files, directories):
    if sys.stdin and sys.stdin.isatty():
        if(len(files) > 0):
            h,w,printable_matrix = find_matrix(files)
            for x in printable_matrix:
                print(x)
            print()
        for d in directories:
            print("{}:".format(d))
            files_from_subdirectory_list = get_current_directory_files(d)
            if(len(files_from_subdirectory_list) > 0): 
                h,w,printable_matrix = find_matrix(files_from_subdirectory_list)
                for x in printable_matrix:
                    print(x)
            if(not  d == directories[len(directories) - 1]):
                print()

    else:
        for f in files: 
            print(f)
        for d in directories:
            print(d)



def print_mode_2_ls_only():
    ordered_current_directory = get_current_directory_files("./")
    for f in ordered_current_directory:
        print(f)



def main():
    list_of_arguments = sys.argv[1:]
    if len(list_of_arguments) == 0:
        print_mode_2_ls_only()
    else:
        ordered_current_directory = get_current_directory_files("./")
        list_of_arguments = handle_nonexisting_files(list_of_arguments, ordered_current_directory)
        current_directory_files = handle_if_argument_is_file(list_of_arguments)
        current_directory_directories = handle_if_argument_is_directory(list_of_arguments)
        print_mode_1_ls_w_files_and_directories(current_directory_files, current_directory_directories)


if __name__ == "__main__":
    main()